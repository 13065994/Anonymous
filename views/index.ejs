<!DOCTYPE html>
<html lang="en" id="htmlRoot">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NOTE PAD FOR ANT SCRIPT/CMDS/NOTES</title>
  <!-- ico -->
  <link rel="icon" href="/images/web-logo.png" type="image/x-icon">
  <meta name="description" content="Anonymous Notepad is a simple web application that allows you to create notes without signing up.">
  <meta name="keywords" content="Anonymous Notepad, Notepad, Note, Anonymous, Web Application">
  <meta name="author" content="Notepad">
  <meta property="og:title" content="NOTEPAD-GBIN">
  <meta property="og:description" content="Notepad is a simple web application that allows you to create notes without signing up.">
  <meta property="og:image" content="/images/web-logo.png">
  <meta property="og:url" content="https://anonymous-notepad.herokuapp.com/">
  <meta property="og:type" content="website">
  <meta property="og:site_name" content="Anonymous Notepad">
  <meta property="og:locale" content="en_US">
  <meta property="og:locale:alternate" content="en_US">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

<body>
  <div class="container mt-2">
    <h1>Anonymous Notepad</h1>
    <div class="mb-3">
      <textarea class="form-control" id="content" rows="10" style="height: 70vh"><%= content %></textarea>
    </div>
    <div class="mb-3">
      <label for="password" class="form-label">Password:</label>
      <input type="password" class="form-control" id="password" placeholder="Enter password" style="<%= isAuthor ? 'border: 2px solid green' : '' %>">
    </div>
    <button class="btn btn-primary mb-3" id="copyUrl">Copy URL</button>
    <button class="btn btn-secondary mb-3" id="toggleTheme">Toggle Dark/Light Mode</button>
		<p class="text-muted">Note: when you see border color is green on password input, it means you are the author of this note and you can update the password. Otherwise, if content is protected by password, you must enter the correct password to view and edit the content.</p>
  </div>

  <!-- Toast Container -->
  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5; max-width: 100%">
    <div id="copyToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        URL copied to clipboard!
      </div>
    </div>
  </div>

  <script>
    const fingerprint = generateFingerprint();
    let contentIsChanged = false;
    getAndSetContent(true);
    isAuthorNote();

    document.getElementById('copyUrl').onclick = function() {
      navigator.clipboard.writeText(window.location.href).then(function() {
        // Show the toast
        const toastElement = document.getElementById('copyToast');
        const toast = new bootstrap.Toast(toastElement);
        toast.show();
      });
    };

    document.getElementById('content').addEventListener("input", function() {
      contentIsChanged = true;
      updateContent();
    });

    document.getElementById('toggleTheme').onclick = function() {
      const htmlRoot = document.getElementById('htmlRoot');
      if (htmlRoot.getAttribute('data-bs-theme') === 'dark') {
        htmlRoot.removeAttribute('data-bs-theme');
        localStorage.setItem('theme', 'light');
      } else {
        htmlRoot.setAttribute('data-bs-theme', 'dark');
        localStorage.setItem('theme', 'dark');
      }
    };

    document.getElementById('password').addEventListener("input", function() {
      fetch(window.location.pathname + "/update-password", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            password: document.getElementById('password').value,
            author: fingerprint,
            endpoint: window.location.pathname.replace('/', '')
          }),
        })
        .then(response => response.json())
        .then(data => {
          if (data.hasOwnProperty('content')) {
            document.getElementById('content').value = data.content;
          }
        });
    });

    // Set theme on page load
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme && savedTheme === 'dark') {
      document.getElementById('htmlRoot').setAttribute('data-bs-theme', 'dark');
    }

    function getAndSetContent(isInitialLoad) {
      fetch('/api/getNote', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            password: document.getElementById('password').value,
            endpoint: window.location.pathname.replace('/', ''),
            author: fingerprint
          }),
        })
        .then(response => response.json())
        .then(data => {
          if (isInitialLoad && contentIsChanged) {
            return;
          }
          document.getElementById('content').value = data.content;
        });
    }

    function updateContent() {
      fetch(window.location.pathname, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: document.getElementById('content').value,
          author: fingerprint,
          password: document.getElementById('password').value
        }),
      });
    }

    function generateFingerprint() {
      // Thu thập thông tin về hệ thống
      const userAgent = navigator.userAgent;
      const screenWidth = window.screen.width;
      const screenHeight = window.screen.height;
      const colorDepth = window.screen.colorDepth;
      const timezoneOffset = new Date().getTimezoneOffset();
      const language = navigator.language;
      const plugins = Array.from(navigator.plugins).map(plugin => plugin.name).join(',');
      const fonts = detectFonts();

      // Kết hợp các thông tin để tạo fingerprint
      const fingerprintString = [
        userAgent,
        screenWidth,
        screenHeight,
        colorDepth,
        timezoneOffset,
        language,
        plugins,
        fonts
      ].join('|');

      // Hash hóa fingerprint string để tạo một giá trị duy nhất
      return hashFingerprint(fingerprintString);
    }

    function detectFonts() {
      // Hàm giả định để phát hiện các font chữ có sẵn
      // Bạn có thể sử dụng các phương pháp khác để xác định font chữ nếu cần
      const testFonts = ['Arial', 'Verdana', 'Times New Roman', 'Courier New'];
      const fontTestElement = document.createElement('span');
      fontTestElement.style.position = 'absolute';
      fontTestElement.style.left = '-9999px';
      fontTestElement.style.fontSize = '72px';
      fontTestElement.style.fontFamily = 'sans-serif';
      fontTestElement.textContent = 'abcdefghijklmnopqrstuvwxyz';

      document.body.appendChild(fontTestElement);
      const detectedFonts = testFonts.filter(font => {
        fontTestElement.style.fontFamily = font + ', sans-serif';
        return fontTestElement.offsetWidth !== fontTestElement.offsetWidth; // check font width
      });
      document.body.removeChild(fontTestElement);
      return detectedFonts.join(',');
    }

    function hashFingerprint(fingerprint) {
      // Sử dụng thuật toán hash đơn giản để tạo một giá trị duy nhất từ fingerprint string
      // Bạn có thể thay thế hàm hash này bằng một thuật toán hash mạnh hơn nếu cần
      let hash = 0;
      for (let i = 0; i < fingerprint.length; i++) {
        const char = fingerprint.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash |= 0; // convert to 32-bit integer
      }
      return hash.toString(16);
    }

    function isAuthorNote() {
      fetch(window.location.pathname + "/is-author", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            author: fingerprint
          })
        })
        .then(response => response.json())
        .then(data => {
          document.getElementById('password').style.border = data.isAuthor ? '2px solid green' : '2px solid blue';
        });
    }
  </script>
</body>

</html>
